#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 

#define MAX 20
#define elements_per_process 4
#define x 5

int main(int argc, char* argv[]) {
	int pid;
	int number_of_processes;
	int sendbuf[MAX] = { 5, 7, 8, 9, 4, 5, 10, 5, 5, 11, 9, 13, 5, 21, 13, 5, 11, 7, 5, 6 };
	int recvbuf[MAX];
	int positions_found[elements_per_process];
	int positions_gathered[MAX];

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &number_of_processes);

	if (number_of_processes != 5) {
		printf("Please specify 5 processes.\n");
		MPI_Finalize();
		exit(0);
	}

	if (pid == 0) {
		int i;
		bool found = false;

		MPI_Scatter(sendbuf, elements_per_process, MPI_INT, recvbuf, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);

		for (i = 0; i < elements_per_process; i++) {
			if (recvbuf[i] == x) {
				printf("Process %d found the number %d at position %d.\n", pid, x, pid * elements_per_process + i);
				positions_found[i] = pid * elements_per_process + i;
			}
			else {
				positions_found[i] = -1;
			}
		}

		MPI_Gather(positions_found, elements_per_process, MPI_INT, positions_gathered, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);

		for (i = 0; i < MAX; i++)
			if (positions_gathered[i] != -1) {
				printf("Gathered position: %d.\n", positions_gathered[i]);
				found = true;
			}

		if (found == false)
			printf("The number was not found.\n");
	}		
	else {
		int i;

		MPI_Scatter(sendbuf, elements_per_process, MPI_INT, recvbuf, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);

		for (i = 0; i < elements_per_process; i++) {
			if (recvbuf[i] == x) {
				printf("Process %d found the number %d at position %d.\n", pid, x, pid * elements_per_process + i);
				positions_found[i] = pid * elements_per_process + i;
			}
			else {
				positions_found[i] = -1;
			}
		}

		MPI_Gather(&positions_found, elements_per_process, MPI_INT, &positions_gathered, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);
	}

	MPI_Finalize();

	return 0;
}
