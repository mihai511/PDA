#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 

#define MAX 101

bool checkPrime(int n) {
	bool isPrime = true;
	int i;

	if (n == 1) {
		isPrime = false;
	} else {
		for (i = 2; i < n; i++) {
			if (n % i == 0) {
				isPrime = false;
				break;
			}
		}
	}

	return isPrime;
}

int main(int argc, char* argv[]) {
	int pid;
	int number_of_processes;
	int elements_per_process;
	MPI_Status status;

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &number_of_processes);

	if (pid == 0) {
		int i;
		int start;
		int finish;

		if (number_of_processes != 1)
			elements_per_process = MAX / (number_of_processes - 1);
		else
			printf("What's the point of using only 1 process?");

		for (i = 1; i < number_of_processes; i++) {
			start = (i - 1) * elements_per_process + 1;
			finish = start + elements_per_process - 1;
			
			if ((MAX - finish < elements_per_process) && (MAX - finish != 0))
				finish = MAX;

			MPI_Send(&start, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
			MPI_Send(&finish, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
		}

	} else {
		int i;
		int start;
		int finish;

		MPI_Recv(&start, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
		MPI_Recv(&finish, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);

		for (i = start; i <= finish; i++) {
			if (checkPrime(i))
				printf("Process %d found the prime number: %d.\n", pid, i);
		}
	}

	MPI_Finalize();

	return 0;
}
