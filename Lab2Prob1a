#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 

#define MAX 20
#define x 5

int main(int argc, char* argv[]) {
	int pid;
	int number_of_processes;
	int elements_per_process;
	int start;
	int finish;
	int sendbuf[MAX] = { 1, 1, 3, 4, 2, 7, 1, 3, 5, 5, 7, 4, 8, 11, 5, 7, 8, 23, 12, 5 };
	int result = -1;
	int i;

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &number_of_processes);

	MPI_Bcast(sendbuf, MAX, MPI_INT, 0, MPI_COMM_WORLD);

	elements_per_process = MAX / number_of_processes;

	start = pid * elements_per_process;

	if(pid != number_of_processes - 1)
		finish = start + elements_per_process - 1;
	else
		finish = MAX;

	for (i = start; i <= finish; i++) {
		if (sendbuf[i] == x) {
			MPI_Reduce(&i, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
			printf("Process %d found the number %d at position %d.\n", pid, x, i);
		}
	}

	MPI_Barrier(MPI_COMM_WORLD);

	if (pid == 0)
		if (result != -1)
			printf("The maximum position at which %d was found is %d.\n", x, result);
		else
			printf("The number was not found.");

	MPI_Finalize();

	return 0;
}
