#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 

#define m 1000
#define MAX 100

int main(int argc, char* argv[]) {
	int pid;
	int number_of_processes;
	int elements_per_process;
	MPI_Status status;

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &number_of_processes);

	if (pid == 0) {
		int i;
		double time_taken_to_execute;

		if (number_of_processes != 1)
			elements_per_process = MAX / (number_of_processes - 1);
		else
			printf("What's the point of using only 1 process?");

		for (i = 1; i < number_of_processes; i++) {
			MPI_Recv(&time_taken_to_execute, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, &status);
			printf("Process %d took %f milliseconds to execute.\n", i, time_taken_to_execute);
		}

	} else {
		int i;
		int sum = 0;
		double time_taken;
		int random;

		srand(time(NULL) + pid);

		clock_t begin = clock();

		for (i = 1; i <= m; i++) {
			random = rand() % MAX + 1;
			printf("Process %d generates number %d.\n", pid, random);
			sum += random;
		}

		printf("Sum of all elements generated by process %d is %d.\n", pid, sum);

		clock_t end = clock();
		time_taken = (double)(end - begin) * 1000.0 / CLOCKS_PER_SEC;

		MPI_Send(&time_taken, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);
	}

	MPI_Finalize();

	return 0;
}
